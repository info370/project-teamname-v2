ggmap(seattle) +
geom_point(data = stops.here, aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.75)
#coord_map()
# lets find a way to count the crimes near each bus stop
stop <- stops.here[1,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
nrow(crimes)
# nrow(data %>% filter(dist < 4600))
crime_count <- integer()
for(i in 1:nrow(stops.here)) {
stop <- stops.here[i,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
crime_count[i] <- nrow(crimes %>% filter(dist < 50))
}
stops.here$crime_count = crime_count
# View(stops.here)
nrow(stops.here[stops.here$crime_count > 0,])
View(stops.here)
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 0,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
freq.stop <- table(stops.here$crime_count)
ggplot(as.data.frame(freq.stop),
aes(x = Var1, y = Freq)) +
scale_y_log10() +
geom_histogram(stat = 'identity')
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 6,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 12,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
# lets find a way to count the crimes near each bus stop
stop <- stops.here[1,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
nrow(crimes)
# nrow(data %>% filter(dist < 4600))
crime_count <- integer()
for(i in 1:nrow(stops.here)) {
stop <- stops.here[i,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
crime_count[i] <- nrow(crimes %>% filter(dist < 10))
}
stops.here$crime_count = crime_count
# View(stops.here)
nrow(stops.here[stops.here$crime_count > 0,])
View(stops.here)
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 0,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
freq.stop <- table(stops.here$crime_count)
ggplot(as.data.frame(freq.stop),
aes(x = Var1, y = Freq)) +
scale_y_log10() +
geom_histogram(stat = 'identity')
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 12,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
# lets find a way to count the crimes near each bus stop
stop <- stops.here[1,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
nrow(crimes)
# nrow(data %>% filter(dist < 4600))
crime_count <- integer()
for(i in 1:nrow(stops.here)) {
stop <- stops.here[i,]
crimes <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(stop$stop_lon, stop$stop_lat)))
crime_count[i] <- nrow(crimes %>% filter(dist < 25))
}
stops.here$crime_count = crime_count
# View(stops.here)
nrow(stops.here[stops.here$crime_count > 0,])
View(stops.here)
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 0,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
freq.stop <- table(stops.here$crime_count)
ggplot(as.data.frame(freq.stop),
aes(x = Var1, y = Freq)) +
scale_y_log10() +
geom_histogram(stat = 'identity')
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 12,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
spd.911 <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(here_long, here_lat)))
nrow(spd.911)
descriptions <- c("STRONG ARM ROBBERY", "PERSON WITH A WEAPON (NOT GUN)", "HAZARDS", "HARASSMENT, THREATS", "FIGHT DISTURBANCE", "CRISIS COMPLAINT - GENERAL", "ARMED ROBBERY")
# Removes Specifically Harassment by Telephone and Writing, as well as other non-scary crimes
data.ped <- spd.911 %>% filter(str_detect(Event.Clearance.Description, paste(descriptions, collapse="|"))) %>% filter(!str_detect(Event.Clearance.Description, "HARASSMENT, THREATS - BY TELEPHONE, WRITING"))
# data.ped <- data.now
nrow(data.ped)
# data.now <- data.ped %>% filter(clearance_date_ts < '2017-10-31 00:00:00')
nrow(data.now)
data.here <- data.now %>% filter(dist < 2600)
data <- data.here
nrow(data)
# View(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
data <- read.csv('YearSEAPD', headers = TRUE)
data <- read.csv('YearSEAPD', header = TRUE)
data <- read.csv('YearSEAPD.csv', header = TRUE)
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
nrow(stops)
nrow(stops.here)
nrow(stops.here[stops.here$crime_count > 0,])
ggplot(as.data.frame(freq.stop),
aes(x = Var1, y = Freq)) +
scale_y_log10() +
xlab('Number of Crimes Reported') +
ylab('Count of stops') +
geom_histogram(stat = 'identity')
ggmap(seattle) +
geom_point(data = stops.here[crime_count > 12,], aes(x = stop_lon, y = stop_lat), colour = "red", alpha = 0.5)
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +# create bar plot
coord_flip()
by_hr <- table(data$event_clearance_hr)
ggplot(as.data.frame(by_hr), aes(x = Var1, y = Freq)) +
geom_point() +
xlab('hour of day')
by_hr <- table(data$event_clearance_hr)
by_hr
# install.packages("tidyverse");
# install.packages("rgdal");
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
path.to.csv <- '../Milestone 2/Seattle_Police_Department_911_Incident_Response_Oct17.csv'
spd.911 <- read.csv(path.to.csv, header = TRUE)
spd.911$clearance_date_ts = as.POSIXct(strptime(spd.911$Event.Clearance.Date, "%m/%d/%Y %I:%M:%S %p"))
spd.911$clearance_date_date = as.Date(spd.911$clearance_date_ts)
View(spd.911)
# path to the FOLDER with the .shp file in it. the second param is the name of the .shp file
# seattle <- readOGR(dsn = path.expand("~/documents/INFO370/project-teamname-v2/maps-api-test"), layer = "Seattle_City_Limits")
# usa <- map_data("state")
# data <- merge(usa, spd.911)
# Red Square coordinates
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
spd.911 <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(here_long, here_lat)))
nrow(spd.911)
descriptions <- c("STRONG ARM ROBBERY", "PERSON WITH A WEAPON (NOT GUN)", "HAZARDS", "HARASSMENT, THREATS", "FIGHT DISTURBANCE", "CRISIS COMPLAINT - GENERAL", "ARMED ROBBERY")
# Removes Specifically Harassment by Telephone and Writing, as well as other non-scary crimes
data.ped <- spd.911 %>% filter(str_detect(Event.Clearance.Description, paste(descriptions, collapse="|"))) %>% filter(!str_detect(Event.Clearance.Description, "HARASSMENT, THREATS - BY TELEPHONE, WRITING"))
# data.ped <- data.now
nrow(data.ped)
data.now <- data.ped %>% filter(clearance_date_ts < '2017-10-31 00:00:00')
nrow(data.now)
data.here <- data.now %>% filter(dist < 4600)
data <- data.here
nrow(data)
# View(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
freq_by_desc <- table(droplevels(data$Event.Clearance.Description))
# View(freq_by_desc)
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +# create bar plot
coord_flip()
#Traffic related calls, suspicious circumstances, and disturbances are the the most significant threats to pedestrations
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude, group = Event.Clearance.Description, color = Event.Clearance.Description), alpha = 0.5) +
facet_wrap(~ Event.Clearance.Description) +
theme(axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
legend.position = "none"
)
# selecting just ID and location data
df_loc <- data %>% dplyr::select(CAD.CDW.ID, Longitude, Latitude)
# figuring out number of clusters
wss <- c()
# clusters 1 to 15
for (i in 1:15) {
wss[i] <- sum(kmeans(df_loc, centers=i)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# fitting model
fit <- kmeans(df_loc, 10)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
fit$cluster
cluster.size <- data.frame(1:10, fit$size)
cluster.size
ggplot(data = cluster.size, aes(x = X1.10, y = fit.size)) +
geom_bar(stat = 'identity')
ggplot()
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
# looking at cluster means
aggregate(df_loc, by=list(fit$cluster), FUN=mean)
df_loc
# adding data back into dataframe
# df_loc <- df_loc %>% mutate(cluster = fit$cluster)
data$cluster <- fit$cluster
# View(data)
# timestamp ->  year  month day hour  minute
# sector -> to factor (there are 17 sectors)
# beat -> to factor (there are 3 beats per sector)
# clean the data a bit more
data$event_clearance_ts = as.POSIXct(strptime(data$Event.Clearance.Date, "%m/%d/%Y %I:%M:%S %p"))
data$event_clearance_date = as.Date(data$event_clearance_ts)
data$event_clearance_month = month(ymd_hms(as.character(data$event_clearance_ts)))
data$event_clearance_day = weekdays(data$event_clearance_date)
data$event_clearance_hr = hour(ymd_hms(as.character(data$event_clearance_ts)))
data$event_clearance_mn = minute(ymd_hms(as.character(data$event_clearance_ts)))
data$Initial.Type.Group = factor(data$Initial.Type.Group)
data$Event.Clearance.Group = factor(data$Event.Clearance.Group)
data$Zone.Beat = factor(data$Zone.Beat)
data$District.Sector = factor(data$District.Sector)
data$event_clearance_day = factor(data$event_clearance_day)
data$at_scene_time_ts = as.POSIXct(strptime(data$At.Scene.Time, "%m/%d/%Y %I:%M:%S %p")) #converting time from String to date and time representation (POSIXct)
data$at_scene_time_hr = hour(ymd_hms(as.character(data$at_scene_time_ts)))
data$at_scene_time_date = as.Date(data$at_scene_time_ts)
data$time_until_event_clear = as.numeric(data$event_clearance_ts - data$at_scene_time_ts)
# View(data)
col.names <- paste(c(
"Event.Clearance.Code"
, "cluster"
, "Census.Tract"
, "event_clearance_day"
, "Event.Clearance.Group"
, "Event.Clearance.SubGroup"
, "District.Sector"
, "Zone.Beat"
#, "event_clearance_ts"
# ,"Incident.Location"
, "event_clearance_hr"
, "event_clearance_mn"
, "event_clearance_month"
, "Hundred.Block.Location"
), collapse="|")
cols <- grep(col.names, colnames(data))
cols
# corr_matrix <- cor(data[,cols]) # correlations between all predictor vars
# corr_matrix
# cutoff <- 0.5 # should be higher in practice
# highly_corr <- findCorrelation(corr_matrix, cutoff=cutoff)
# print(colnames(spd.911)[highly_corr]) # age is highly correalted with pregnant
train.data <- select(data, cols)
train.data
# data <- data %>% droplevels()
# grep("Hundred.Block.Location", colnames(train.data), invert = T)
predictors <- grep("Hundred.Block.Location", colnames(train.data), invert = T)
outcome <- grep("Hundred.Block.Location", colnames(train.data))
# train.data[,predictors]
frame <- data.frame(train.data[,predictors])
frame
out.factor <- train.data$Hundred.Block.Location
as.vector(out.factor)
control <- rfeControl(functions = rfFuncs, method="cv", number=10)
results <- rfe(frame, out.factor, sizes = c(1:13), rfeControl = control) # this will take AWHILE...
# hundred block vs TOD
by_hr <- table(data$event_clearance_hr)
by_hr
ggplot(as.data.frame(by_hr), aes(x = Var1, y = Freq)) +
geom_point() +
xlab('hour of day')
data.w.at.scene <- filter(data, !is.na(at_scene_time_date))
ggplot(data.w.at.scene, aes(x = event_clearance_ts, y = time_until_event_clear)) +
geom_point(alpha = 0.25)
ggplot(data.w.at.scene, aes(x = Hundred.Block.Location, y = time_until_event_clear)) +
geom_point(alpha = 0.25)
# selecting just ID and location data
df <- data.w.at.scene %>% dplyr::select(CAD.CDW.ID, Latitude, Longitude, event_clearance_hr, time_until_event_clear)
# figuring out number of clusters
wss <- c()
# clusters 1 to 15
for (i in 1:15) {
wss[i] <- sum(kmeans(df, centers=i)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
# fitting model
fit <- kmeans(df, 10)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
fit$cluster
cluster.size <- data.frame(1:10, fit$size)
cluster.size
ggplot(data = cluster.size, aes(x = X1.10, y = fit.size)) +
geom_bar(stat = 'identity')
ggplot()
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
# looking at cluster means
aggregate(df_loc, by=list(fit$cluster), FUN=mean)
# install.packages("tidyverse");
# install.packages("rgdal");
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
path.to.csv <- '~/Downloads/Seattle_Police_Department_911_Incident_Response.csv'
spd.911 <- read.csv(path.to.csv, header = TRUE)
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +# create bar plot
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity')
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(by.month),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity')
data <- filter(data, !(Event.Clearance.Date > '2017-10-01' && Event.Clearance.Data < '2017-10-31' ))
data <- filter(data, !(Event.Clearance.Date > '2017-10-01' && Event.Clearance.Date < '2017-10-31' ))
nrow(data)
data <- filter(data, !(clearance_date_ts > '2017-10-01' && clearance_date_ts < '2017-10-31' ))
nrow(data)
data <- filter(data, !(clearance_date_ts > '2017-10-01 00:00:00' && clearance_date_ts < '2017-10-31 00:00:00' ))
nrow(data)
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
data <- filter(data, !(clearance_date_ts > '2017-10-01 00:00:00' && clearance_date_ts < '2017-10-31 00:00:00'))
data
View(data)
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
View(data)
data <- filter(data, !(clearance_date_ts > '2017-10-01 00:00:00' & clearance_date_ts < '2017-10-31 00:00:00'))
# install.packages("tidyverse");
# install.packages("rgdal");
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
path.to.csv <- '~/Downloads/Seattle_Police_Department_911_Incident_Response(1).csv'
spd.911 <- read.csv(path.to.csv, header = TRUE)
# install.packages("tidyverse");
# install.packages("rgdal");
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
path.to.csv <- '~/Downloads/Seattle_Police_Department_911_Incident_Response (1).csv'
spd.911 <- read.csv(path.to.csv, header = TRUE)
spd.911$clearance_date_ts = as.POSIXct(strptime(spd.911$Event.Clearance.Date, "%m/%d/%Y %I:%M:%S %p"))
spd.911$clearance_date_date = as.Date(spd.911$clearance_date_ts)
spd.911$event_clearance_ts = as.POSIXct(strptime(spd.911$Event.Clearance.Date, "%m/%d/%Y %I:%M:%S %p"))
spd.911$event_clearance_date = as.Date(spd.911$event_clearance_ts)
spd.911$event_clearance_month = month(ymd_hms(as.character(spd.911$event_clearance_ts)))
spd.911$event_clearance_day = weekdays(spd.911$event_clearance_date)
spd.911$event_clearance_hr = hour(ymd_hms(as.character(spd.911$event_clearance_ts)))
spd.911$event_clearance_mn = minute(ymd_hms(as.character(spd.911$event_clearance_ts)))
spd.911$Initial.Type.Group = factor(spd.911$Initial.Type.Group)
spd.911$Event.Clearance.Group = factor(spd.911$Event.Clearance.Group)
spd.911$Zone.Beat = factor(spd.911$Zone.Beat)
spd.911$District.Sector = factor(spd.911$District.Sector)
spd.911$event_clearance_day = factor(spd.911$event_clearance_day)
spd.911$at_scene_time_ts = as.POSIXct(strptime(spd.911$At.Scene.Time, "%m/%d/%Y %I:%M:%S %p")) #converting time from String to date and time representation (POSIXct)
spd.911$at_scene_time_hr = hour(ymd_hms(as.character(spd.911$at_scene_time_ts)))
spd.911$at_scene_time_date = as.Date(spd.911$at_scene_time_ts)
spd.911$time_until_event_clear = as.numeric(spd.911$event_clearance_ts - spd.911$at_scene_time_ts)
# path to the FOLDER with the .shp file in it. the second param is the name of the .shp file
# seattle <- readOGR(dsn = path.expand("~/documents/INFO370/project-teamname-v2/maps-api-test"), layer = "Seattle_City_Limits")
# usa <- map_data("state")
# data <- merge(usa, spd.911)
# Red Square coordinates
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
spd.911 <- spd.911 %>%
rowwise() %>%
mutate(dist=distVincentyEllipsoid(c(Longitude, Latitude), c(here_long, here_lat)))
nrow(spd.911)
descriptions <- c("STRONG ARM ROBBERY", "PERSON WITH A WEAPON (NOT GUN)", "HAZARDS", "HARASSMENT, THREATS", "FIGHT DISTURBANCE", "CRISIS COMPLAINT - GENERAL", "ARMED ROBBERY")
# Removes Specifically Harassment by Telephone and Writing, as well as other non-scary crimes
data.ped <- spd.911 %>% filter(str_detect(Event.Clearance.Description, paste(descriptions, collapse="|"))) %>% filter(!str_detect(Event.Clearance.Description, "HARASSMENT, THREATS - BY TELEPHONE, WRITING")) %>% filter(!str_detect(Event.Clearance.Description, "HARBOR DEBRIS, NAVIGATIONAL HAZARDS"))
nrow(data.ped)
data.here <- data.ped %>% filter(dist < 2600)
data.w.at.scene <- filter(data.here, !is.na(at_scene_time_date))
data <- data.w.at.scene
nrow(data)
# View(data)
write.csv(data, '2016-2017-Clean.csv')
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
View(data)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
data <- filter(data, !(clearance_date_ts > '2017-10-01 00:00:00' & clearance_date_ts < '2017-10-31 00:00:00'))
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
View(data)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
data <- read.csv('2016-2017-Clean.csv', header = TRUE)
# View(data)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
nrow(data)
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#coord_map()
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(by.month),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity')
corr(table$Var1, table$Freq)
cor(table$Var1, table$Freq)
cor(as.vector(table$Var1), as.vector(table$Freq))
by.month
by.month$Var1
by.month
as.vector(by.month$Var1)
data.frame(by.month)
cor(by.month$Var1, by.monrth$Freq)
cor(by.month$Var1, by.month$Freq)
cor(1:12, by.month$Freq)
cor(1:12, by.month$Freq)
by.month$Freq
by.month[Freq]
by.month
#check frequency by month
by.month <- table(data$event_clearance_month)
by.month < - data.frame(by.month)
by.month
cor(1:12, by.month$Freq)
by.month
by.month <- table(data$event_clearance_month)
by.month < - data.frame(by.month)
data.frame(by.month)
cor(1:12, data.frame(by.month)$Freq)
k
k <- kruskal.test(Freq ~ Var1, by.month)
k
k <- kruskal.test(Var1 ~ Freq, by.month)
k
k <- kruskal.test(Freq ~ Var1, by.month)
k
t(by.month)
data.frame(t(by.month))
t(by.month)
by.month <- table(data$event_clearance_month)
t(by.month)
as.dataframe(t(by.month))
as.data.frame(t(by.month))
t(by.month)
k <- kruskal.test(Freq ~ Var1, by.month)
k
