# fitting model
fit <- kmeans(df_loc, clusters)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
return(fit)
}
#make a plot that will tell you how many clusters might work for a given dataframe
# x = a dataframe
# max = the maximum number of clusters you want to try
find.num.clusters <- function(x, max) {
if(max > nrow(x)) { stop('Cannot fit more clusters than there are rows in dataframe')}
df_loc <- x %>% dplyr::select(CAD.CDW.ID, time_until_event_clear)
wss = c()
for (i in 1:max) {
wss[i] <- sum(kmeans(df_loc, centers=i)$withinss)
}
plot(1:max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#plot the number of observations in each cluster
# x = a fit object returned from kmeans() or the fit.clusters() function above
plot.cluster.sizes <- function(x) {
cluster.size <- data.frame(data.frame('clusters' = 1:nrow(x$centers), x$size))
ggplot(data = cluster.size, aes(x = clusters, y = x.size)) +
geom_bar(stat = 'identity')
}
num_clusters <- find.num.clusters(morning, 5)
num_clusters <- find.num.clusters(morning, 2)
num_clusters <- find.num.clusters(morning, 1)
num_clusters <- find.num.clusters(mid.day, 2)
num_clusters <- find.num.clusters(mid.day, 5)
num_clusters <- find.num.clusters(mid.day, 10)
#take out general crisis complaint - general
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
# find the mode of numeric/character data
Mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux)); ux[tab == max(tab)]
}
tod.mean <- mean(data$at_scene_time_hr)
tod.med <- median(data$at_scene_time_hr)
tod.mean
tod.med
Mode(data$at_scene_time_hr)
#What is the most common crime committed at each period?
Mode(morning$Event.Clearance.Description)
Mode(mid.day$Event.Clearance.Description)
Mode(afternoon$Event.Clearance.Description)
Mode(evening$Event.Clearance.Description)
Mode(night$Event.Clearance.Description)
Mode(early.morning$Event.Clearance.Description)
fit <- fit.clusters(morning, 10)
#take out general crisis complaint - general
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
# find the mode of numeric/character data
Mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux)); ux[tab == max(tab)]
}
tod.mean <- mean(data$at_scene_time_hr)
tod.med <- median(data$at_scene_time_hr)
tod.mean
tod.med
Mode(data$at_scene_time_hr)
#What is the most common crime committed at each period?
Mode(morning$Event.Clearance.Description)
Mode(mid.day$Event.Clearance.Description)
Mode(afternoon$Event.Clearance.Description)
Mode(evening$Event.Clearance.Description)
Mode(night$Event.Clearance.Description)
Mode(early.morning$Event.Clearance.Description)
fit <- fit.clusters(morning, 5)
data <- read.csv('../maps-api-test/2016-2017-Clean.csv', header = TRUE)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(by.month),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
labs(title = 'Crimes Reported In U-District, Nov. 2016 - Oct. 2017') +
xlab('Month') +
ylab('Number of Crimes Reported')
k <- kruskal.test(Freq ~ Var1, by.month)
k
freq_by_desc <- table(droplevels(data$Event.Clearance.Description))
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
xlab('Number of Crimes') +
ylab('Crime Description') +
coord_flip()
#some useful functions for performing clustering
#extract the lat and long from a dataframe, and run kmeans on it
# x = one of our dataframes
# clusters = how many centers you want kmeans to work with when clustering
fit.clusters <- function(x, clusters) {
# selecting just ID and location data
df_loc <- x %>% dplyr::select(CAD.CDW.ID, Latitude, Longitude)
# fitting model
fit <- kmeans(df_loc, clusters)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
return(fit)
}
#make a plot that will tell you how many clusters might work for a given dataframe
# x = a dataframe
# max = the maximum number of clusters you want to try
find.num.clusters <- function(x, max) {
if(max > nrow(x)) { stop('Cannot fit more clusters than there are rows in dataframe')}
df_loc <- x %>% dplyr::select(CAD.CDW.ID, Latitude, Longitude)
wss = c()
for (i in 1:max) {
wss[i] <- sum(kmeans(df_loc, centers=i)$withinss)
}
plot(1:max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#plot the number of observations in each cluster
# x = a fit object returned from kmeans() or the fit.clusters() function above
plot.cluster.sizes <- function(x) {
cluster.size <- data.frame(data.frame('clusters' = 1:nrow(x$centers), x$size))
ggplot(data = cluster.size, aes(x = clusters, y = x.size)) +
geom_bar(stat = 'identity')
}
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
#take out general crisis complaint - general
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
#take out general crisis complaint - general
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
# find the mode of numeric/character data
Mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux)); ux[tab == max(tab)]
}
tod.mean <- mean(data$at_scene_time_hr)
tod.med <- median(data$at_scene_time_hr)
tod.mean
tod.med
Mode(data$at_scene_time_hr)
#What is the most common crime committed at each period?
Mode(morning$Event.Clearance.Description)
Mode(mid.day$Event.Clearance.Description)
Mode(afternoon$Event.Clearance.Description)
Mode(evening$Event.Clearance.Description)
Mode(night$Event.Clearance.Description)
Mode(early.morning$Event.Clearance.Description)
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
ggplot(data,
aes(x = data$dist, y = data$time_until_event_clear)) +
geom_point(stat = 'identity') +
xlab('Distance from Red Square (meters)') +
ylab('Clearance Time (minutes)')
mean(data$time_until_event_clear)
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
data.over.twenty <- filter(data, time_until_event_clear > 20000)
data <- data.over.twenty
clearance_codes <- factor(data$Event.Clearance.Code)
clearance.plot <- ggplot(data) +
geom_point(aes(x = data$dist, y = data$time_until_event_clear, colour = clearance_codes), stat = 'identity') +
xlab('Distance from Red Square (Meters)') +
ylab('Clearance Time (Minutes)')
clearance.plot
Mode(data$Event.Clearance.Code) # 350
hazards <- filter(data, Event.Clearance.Code == 350)
mean(hazards$time_until_event_clear) # Mean time is 33575.17 minutes, or about 23 days. We will filter these data points out because of the skew.
data <- filter(data, Event.Clearance.Code != 350) # filtering out hazards
fit <- fit.clusters(morning, 1)
fit$centers[1]
fit <- fit.clusters(morning, 1)
fit$centers[0]
fit <- fit.clusters(morning, 1)
fit$centers[0]
fit <- fit.clusters(morning, 1)
fit$centers[1]
View(fit$centers)
fit <- fit.clusters(morning, 1)
for (row in 1:nrow(fit$centers)) {
row[1]
}
fit <- fit.clusters(morning, 1)
for (row in 1:nrow(fit$centers)) {
row[1]
}
fit <- fit.clusters(morning, 1)
for (row in 1:nrow(fit$centers)) {
View(row[1])
}
for (row in 1:nrow(fit$centers)) {
row
}
for (row in 1:nrow(fit$centers)) {
View(row)
}
fit <- fit.clusters(morning, 1)
for (row in 1:nrow(fit$centers)) {
View(row)
}
fit$centers[1]
for (row in fit$centers) {
row[1]
}
for (row in fit$centers) {
row
}
fit <- fit.clusters(morning, 1)
View(fit$centers)
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
# Clustering functions based on clearance time
fit.clusters <- function(x, clusters) {
# selecting just ID and location data
df_loc <- x %>% dplyr::select(CAD.CDW.ID, time_until_event_clear)
# fitting model
fit <- kmeans(df_loc, clusters)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
return(fit)
}
#make a plot that will tell you how many clusters might work for a given dataframe
# x = a dataframe
# max = the maximum number of clusters you want to try
find.num.clusters <- function(x, max) {
if(max > nrow(x)) { stop('Cannot fit more clusters than there are rows in dataframe')}
df_loc <- x %>% dplyr::select(CAD.CDW.ID, time_until_event_clear)
wss = c()
for (i in 1:max) {
wss[i] <- sum(kmeans(df_loc, centers=i)$withinss)
}
plot(1:max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#plot the number of observations in each cluster
# x = a fit object returned from kmeans() or the fit.clusters() function above
plot.cluster.sizes <- function(x) {
cluster.size <- data.frame(data.frame('clusters' = 1:nrow(x$centers), x$size))
ggplot(data = cluster.size, aes(x = clusters, y = x.size)) +
geom_bar(stat = 'identity')
}
fit <- fit.clusters(morning, 1)
View(fit$centers)
fit$centers[2]
fit <- fit.clusters(mid.day, 10)
View(fit$centers)
fit$centers[1]
for (i in fit$centers) {
i;
}
for (i in fit$centers[1]) {
i;
}
fit <- fit.clusters(mid.day, 10)
nrow(fit$centers)
for (row in 1:nrow(fit$centers)) {
row[1]
}
for (row in 1:nrow(fit$centers)) {
row
}
for (row in 1:nrow(fit$centers)) {
print(row)
}
for (row in 1:nrow(fit$centers)) {
row$time_until_event_clear
}
for (row in 1:nrow(fit$centers)) {
row[time_until_event_clear]
}
for (row in 1:nrow(fit$centers)) {
row[1]
}
for (row in 1:nrow(fit$centers)) {
row
}
for (row in 1:nrow(fit$centers)) {
fit$centers[row]
}
for (row in 1:nrow(fit$centers)) {
print(fit$centers[row])
}
fit <- fit.clusters(mid.day, 10)
nrow(fit$centers)
for (row in 1:nrow(fit$centers)) {
print(fit$centers[row])
}
fit$centers$CAD.CDW.ID
fit$centers[1]
fit$centers[1:nrow(fit$centers)]
fit <- fit.clusters(mid.day, 10)
View(fit$centers)
fit$centers[1:nrow(fit$centers)]
fit <- fit.clusters(mid.day, 10)
View(fit$centers)
fit$centers[1:nrow(fit$centers)]
cluster.crimes <- filter(mid.day, filter(CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)]))
fit <- fit.clusters(mid.day, 10)
View(fit$centers)
fit$centers[1:nrow(fit$centers)]
cluster.crimes <- filter(mid.day, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
cluster.crimes <- filter(mid.day, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
fit <- fit.clusters(morning, 1)
cluster.crimes <- filter(mid.day, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
fit <- fit.clusters(morning, 1)
cluster.crimes <- filter(mid.day, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
fit <- fit.clusters(morning, 1)
View(fit$centers)
fit <- fit.clusters(morning, 1)
View(fit$centers)
cluster.crimes <- filter(mid.day, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
cluster.crimes <- filter(mid.day, CAD.CDW.ID == fit$centers[1])
View(cluster.crimes)
fit$centers[1]
fit <- fit.clusters(morning, 1)
cluster.crimes <- filter(morning, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
fit <- fit.clusters(morning, 1)
cluster.crimes <- filter(morning, CAD.CDW.ID %in% fit$centers[1:nrow(fit$centers)])
View(cluster.crimes)
