runApp('teamname-v2/ShinyApp')
runApp('teamname-v2/ShinyApp')
shiny::runApp('teamname-v2/ShinyApp')
runApp('teamname-v2/ShinyApp')
runApp('teamname-v2/ShinyApp')
runApp('teamname-v2/ShinyApp')
setwd("D:/Info370/teamname-v2/maps-api-test") # CHANGE TO USE OWN WD IF NEEDED
# install.packages("tidyverse");
# install.packages("rgdal");
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
setwd("D:/Info370/teamname-v2/maps-api-test") # CHANGE TO USE OWN WD IF NEEDED
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
path.to.csv <- 'udistrict.csv'
spd.911 <- read.csv(path.to.csv, TRUE)
data <- read.csv("YearSEAPD.csv")
View(data)
View(data)
aggregated <- read.csv("aggregated_AGI_States_2005-2015.csv", TRUE)
View(aggregated)
aggregated <- read.csv("aggregated_AGI_States_2005-2015.csv", TRUE)
melted.data <- melt(aggregated[,c('STATE','avg.gross.income.2008','avg.gross.income.2009')],id.vars = 1)
setwd("D:/Info370/INFO470/FinalProject")
library(tidyverse, dplyr)
library(ggplot2)
library(reshape)
library(tibble)
# data.2005 <- read.csv("zipcode05.csv", TRUE)
# data.2015 <- read.csv("15zpallagi.csv", TRUE)
aggregated <- read.csv("aggregated_AGI_States_2005-2015.csv", TRUE)
melted.data <- melt(aggregated[,c('STATE','avg.gross.income.2008','avg.gross.income.2009')],id.vars = 1)
west <- filter(aggregated, region == "West")
south <- filter(aggregated, region == "South")
northeast <- filter(aggregated, region == "Northeast")
midwest <- filter(aggregated, region == "Midwest")
melted.west <- melt(west[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.south <- melt(south[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.northeast <- melt(northeast[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.midwest <- melt(midwest[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
west %>%
add_row(x = "999", nvar1 = sum(nvar1), nvar2 = sum(nvar2))
aggregated <- read.csv("aggregated_AGI_States_2005-2015.csv", TRUE)
melted.data <- melt(aggregated[,c('STATE','avg.gross.income.2008','avg.gross.income.2009')],id.vars = 1)
west <- filter(aggregated, region == "West")
south <- filter(aggregated, region == "South")
northeast <- filter(aggregated, region == "Northeast")
midwest <- filter(aggregated, region == "Midwest")
melted.west <- melt(west[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.south <- melt(south[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.northeast <- melt(northeast[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
melted.midwest <- melt(midwest[,c('STATE','avg.gross.income.2008','avg.gross.income.2009', 'avg.gross.income.2010')],id.vars = 1)
#west %>%
# add_row(x = "999", nvar1 = sum(nvar1), nvar2 = sum(nvar2))
ggplot(data = melted.data, aes(x = STATE, y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
labs(title = "All States") +
scale_y_log10()
# facet_wrap(~STATE)
ggplot(data = melted.west, aes(x = STATE, y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
labs(title = "West") +
scale_y_log10(limits = c(NA, 1e+08))
ggplot(data = melted.south, aes(x = STATE, y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
labs(title = "South") +
scale_y_log10(limits = c(NA, 1e+08))
ggplot(data = melted.northeast, aes(x = STATE, y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
labs(title = "Northeast") +
scale_y_log10(limits = c(NA, 1e+08))
ggplot(data = melted.midwest, aes(x = STATE, y = value)) +
geom_bar(aes(fill = variable),stat = "identity",position = "dodge") +
labs(title = "Midwest") +
scale_y_log10(limits = c(NA, 1e+08))
View(melted.midwest)
View(melted.data)
View(aggregated)
View(midwest)
View(melted.west)
# installs packages only if you don't have them
list.of.packages <- c("knitr", "car", "reshape2", "dplyr", "gplots", "gplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
knitr::opts_chunk$set(echo = TRUE)
anova(words.mod)
setwd("D:/Info370/INFO470/FinalProject")
library(tidyverse, dplyr)
library(ggplot2)
library(reshape)
library(tibble)
library("reshape2")
library("gplots")
# data.2005 <- read.csv("zipcode05.csv", TRUE)
# data.2015 <- read.csv("15zpallagi.csv", TRUE)
View(aggregated)
View(west)
west <- west %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015)
west <- west %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015)
south <- south %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015)
northeast <- northeast %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015)
midwest <- midwest %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015)
View(northeast)
View(south)
View(midwest)
west <- west %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009)
south <- south %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009)
northeast <- northeast %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009)
midwest <- midwest %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009)
# Add "Recovered amount" columns
west <- west %>% mutate(recovery = diff.2008.2009 + diff.2009.2015)
south <- south %>% mutate(recovery = diff.2008.2009 + diff.2009.2015)
northeast <- northeast %>% mutate(recovery = diff.2008.2009 + diff.2009.2015)
midwest <- midwest %>% mutate(recovery = diff.2008.2009 + diff.2009.2015)
View(melted.data)
View(melted.northeast)
?avg
?average
?mean
west.test <- west %>% add_row(STATE = "West", avg.gross.income.2008 = mean(avg.gross.income.2008),
avg.gross.income.2009 = mean(avg.gross.income.2009),
avg.gross.income.2015 = mean(avg.gross.income.2015))
west.test <- west %>% add_row(STATE = "West", avg.gross.income.2008 = mean(west$avg.gross.income.2008),
avg.gross.income.2009 = mean(west$avg.gross.income.2009),
avg.gross.income.2015 = mean(west$avg.gross.income.2015))
View(west.test)
west <- west %>% add_row(STATE = "West", avg.gross.income.2008 = mean(west$avg.gross.income.2008),
avg.gross.income.2009 = mean(west$avg.gross.income.2009),
avg.gross.income.2015 = mean(west$avg.gross.income.2015))
west <- west %>% add_row(STATE = "West", avg.gross.income.2008 = mean(west$avg.gross.income.2008),
avg.gross.income.2009 = mean(west$avg.gross.income.2009),
avg.gross.income.2015 = mean(west$avg.gross.income.2015))
south <- south %>% add_row(STATE = "South", avg.gross.income.2008 = mean(south$avg.gross.income.2008),
avg.gross.income.2009 = mean(south$avg.gross.income.2009),
avg.gross.income.2015 = mean(south$avg.gross.income.2015))
northeast <- northeast %>% add_row(STATE = "Northeast", avg.gross.income.2008 = mean(northeast$avg.gross.income.2008),
avg.gross.income.2009 = mean(northeast$avg.gross.income.2009),
avg.gross.income.2015 = mean(northeast$avg.gross.income.2015))
midwest <- midwest %>% add_row(STATE = "Midwest", avg.gross.income.2008 = mean(midwest$avg.gross.income.2008),
avg.gross.income.2009 = mean(midwest$avg.gross.income.2009),
avg.gross.income.2015 = mean(midwest$avg.gross.income.2015))
?union
test <- cbind(west, south, northeast, midewest)
test <- cbind(west, south, northeast, midwest)
test <- rbind(west, south, northeast, midwest)
View(test)
View(test)
test <- rbind(west.test, south, northeast, midwest)
?length
final.averages <- test %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015) %>% filter(length(STATE) > 2)
View(final.averages)
final.averages <- test %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015) %>% filter(nchar(STATE) > 2)
?nchar
final.averages <- test %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015) %>% filter(nchar(as.character(STATE)) > 2)
final.averages <- test %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015) %>% filter(nchar(as.character(STATE)) > 2) %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009, recovery = diff.2008.2009 + diff.2009.2015)
View(south)
write.csv(final.averages, "Regional_averages.csv")
# Linear Model
lm(formula = STATE ~ diff.2008.2009, data = final.averages)
# Linear Model
lm(formula = diff.2008.2009 ~ STATE, data = final.averages)
# Linear Model
lm(formula = STATE ~ diff.2008.2009, data = final.averages)
lm(formula = diff.2008.2009 ~ STATE, data = final.averages)
# Linear Model
lm(formula = STATE ~ diff.2008.2009, data = final.averages)
lm(formula = diff.2008.2009 ~ STATE, data = final.averages)
plot(diff.2008.2009 ~ STATE, data = final.averages)
View(aggregated)
aggregated.two <- aggregated %>% select(STATE, avg.gross.income.2008, avg.gross.income.2009, avg.gross.income.2015, region) %>% mutate(diff.2008.2009 = avg.gross.income.2009 - avg.gross.income.2008, diff.2009.2015 = avg.gross.income.2015 - avg.gross.income.2009, recovery = diff.2008.2009 + diff.2009.2015)
View(aggregated.two)
final.not.average <- aggregated.two
write.csv(final.not.average, "Regional_not.csv")
plot(diff.2008.2009 ~ STATE, data = final.not.average)
plot(diff.2008.2009 ~ region, data = final.not.average)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.averages)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
summary(model.08.09)
anova(model.08.09)
anova(model.08.09)
plot(diff.2008.2009 ~ region, data = final.not.average)
model.09.15 <- lm(formula = diff.2009.2015 ~ region, data = final.not.average)
summary(model.09.15)
anova(model.09.15)
plot(diff.2009.2015 ~ region, data = final.not.average)
View(final.not.average)
model.recovery <- lm(formula = recovery ~ region, data = final.not.average)
summary(model.recovery)
anova(model.recovery)
plot(recovery ~ region, data = final.not.average)
anova(model.recovery)
<<<<<<< HEAD
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
summary(model.08.09)
summary(model.08.09)
?anova
anova(model.08.09)
anova(model.08.09)
plot(diff.2008.2009 ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(recovery ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(recovery ~ region, data = final.not.average)
anova(model.recovery)
anova(model.09.15)
anova(model.08.09)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
summary(model.08.09)
summary(model.09.15)
plot(diff.2009.2015 ~ region, data = final.not.average)
anova(model.09.15)
anova(model.08.09)
plot(diff.2008.2009 ~ region, data = final.not.average)
plot(recovery ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(diff.2008.2009 ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
anova(model.09.15)
anova(model.08.09)
anova(model.09.15)
anova(model.08.09)
anova(model.recovery)
model.recovery <- lm(formula = recovery ~ region, data = final.not.average)
summary(model.recovery)
plot(recovery ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(diff.2008.2009 ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(recovery ~ region, data = final.not.average)
plot(diff.2009.2015 ~ region, data = final.not.average)
final.no.west <- final.not.average %>% filter(!(region == "West"))
setwd("D:/Info370/INFO470/FinalProject")
library(tidyverse, dplyr)
library(ggplot2)
library(reshape)
library(tibble)
library("reshape2")
library("gplots")
# data.2005 <- read.csv("zipcode05.csv", TRUE)
# data.2015 <- read.csv("15zpallagi.csv", TRUE)
final.no.west <- final.not.average %>% filter(!(region == "West"))
View(final.no.west)
no.west.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.no.west)
summary(no.west.08.09)
no.west.09.15 <- lm(formula = diff.2009.2015 ~ region, data = final.no.west)
summary(no.west.09.15)
summary(no.west.09.15)
anova(no.west.09.15)
anova(no.west.08.09)
anova(model.08.09)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
summary(model.08.09)
anova(model.08.09)
plot(diff.2008.2009 ~ region, data = final.not.average)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
#
# no.west.09.15 <- lm(formula = diff.2009.2015 ~ region, data = final.no.west)
# summary(no.west.09.15)
# anova(no.west.09.15)
# plot(diff.2009.2015 ~ region, data = final.no.west)
#
# no.west.recovery <- lm(formula = recovery ~ region, data = final.no.west)
# summary(no.west.recovery)
# anova(no.west.recovery)
# plot(recovery ~ region, data = final.no.west)
summary(no.west.08.09)
final.no.west <- final.not.average %>% filter(!(region == "Midwest"))
no.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.no.west)
summary(no.08.09)
anova(no.08.09)
summary(model.08.09)
final.no.west <- final.not.average %>% filter(!(region == "Midwest"))
no.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.no.west)
no.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.no.west)
summary(no.08.09)
?lm
anova(no.08.09)
final.no.west <- final.not.average %>% filter(!(region == "South"))
no.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.no.west)
summary(no.08.09)
model.08.09 <- lm(formula = diff.2008.2009 ~ region, data = final.not.average)
summary(model.08.09)
anova(model.08.09)
anova(model.09.15)
anova(model.recovery)
plot(diff.2009.2015 ~ region, data = final.not.average)
plot(recovery ~ region, data = final.not.average)
anova(model.recovery)
setwd("D:/Info370/teamname-v2/ShinyApp")
shiny::runApp()
shiny::runApp()
=======
shiny::runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('D:/Info201/DegreesOverTime')
runApp('D:/Info201/DegreesOverTime')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('D:/Info201/DegreesOverTime')
runApp('D:/Info201/DegreesOverTime')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('D:/Info201/DegreesOverTime')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
?p
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
?kruskal.test
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
k <- kruskal.test(Freq ~ Var1, by.month)
data.type(k)
type(k)
k <- kruskal.test(Freq ~ Var1, by.month)
k
runApp('project-teamname-v2/ShinyApp')
?dataTableOutput
?renderTable
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
current.plot <- ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('D:/Info201/DegreesOverTime')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('D:/Info201/DegreesOverTime')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
?mainPanel
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
else if(time.of.day == "Mid Day") {
fit <- fit.clusters(mid.day, 10)
}
else if(time.of.day == "Afternoon") {
fit <- fit.clusters(afternoon, 10)
}
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
fit <- fit.clusters(early.morning, 10)
runApp('project-teamname-v2/ShinyApp')
>>>>>>> 3a548828ac00234c328b8de6ecf3bc7e9b45da77
library(tidyverse)
require("maps")
library(geosphere)
library(stringr)
library(rgdal)
library(caret)
library(lubridate)
library(maptools)
if (!require(ggmap)) { install.packages('ggmap'); require(ggmap) }
library(ggmap)
here_long <-  -122.3095
here_lat <- 47.6560
seattle = get_map(location = c(here_long, here_lat), zoom = 13, maptype = 'roadmap')
data <- read.csv('../maps-api-test/2016-2017-Clean.csv', header = TRUE)
data <- filter(data, !str_detect(Event.Clearance.Description, "HARBOR - DEBRIS, NAVIGATIONAL HAZARDS"))
ggmap(seattle) +
geom_point(data = data, aes(x = Longitude, y = Latitude), colour = "red", alpha = 0.75)
#check frequency by month
by.month <- table(data$event_clearance_month)
ggplot(as.data.frame(by.month),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
labs(title = 'Crimes Reported In U-District, Nov. 2016 - Oct. 2017') +
xlab('Month') +
ylab('Number of Crimes Reported')
k <- kruskal.test(Freq ~ Var1, by.month)
k
freq_by_desc <- table(droplevels(data$Event.Clearance.Description))
ggplot(as.data.frame(freq_by_desc),
aes(x = Var1, y = Freq)) +
geom_bar(stat = 'identity') +
xlab('Number of Crimes') +
ylab('Crime Description') +
coord_flip()
#ggmap(seattle) +
#  geom_point(data = data, aes(x = Longitude, y = Latitude, group = Event.Clearance.Description, color = #Event.Clearance.Description), alpha = 0.5, size = 10) +
#  facet_wrap(~ Event.Clearance.Description) +
#  theme(axis.ticks = element_blank(),
#        axis.text.x = element_blank(),
#        axis.text.y = element_blank(),
#        strip.text = element_text(size=50),
#        legend.position = "none"
#        )
#some useful functions for performing clustering
#extract the lat and long from a dataframe, and run kmeans on it
# x = one of our dataframes
# clusters = how many centers you want kmeans to work with when clustering
fit.clusters <- function(x, clusters) {
# selecting just ID and location data
df_loc <- x %>% dplyr::select(CAD.CDW.ID, Latitude, Longitude)
# fitting model
fit <- kmeans(df_loc, clusters)
fit$centers # look at cluster sizes and means. want clusters to be about equal size
return(fit)
}
#make a plot that will tell you how many clusters might work for a given dataframe
# x = a dataframe
# max = the maximum number of clusters you want to try
find.num.clusters <- function(x, max) {
if(max > nrow(x)) { stop('Cannot fit more clusters than there are rows in dataframe')}
df_loc <- x %>% dplyr::select(CAD.CDW.ID, Latitude, Longitude)
wss = c()
for (i in 1:max) {
wss[i] <- sum(kmeans(df_loc, centers=i)$withinss)
}
plot(1:max, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#plot the number of observations in each cluster
# x = a fit object returned from kmeans() or the fit.clusters() function above
plot.cluster.sizes <- function(x) {
cluster.size <- data.frame(data.frame('clusters' = 1:nrow(x$centers), x$size))
ggplot(data = cluster.size, aes(x = clusters, y = x.size)) +
geom_bar(stat = 'identity')
}
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
<<<<<<< HEAD
fit <- fit.clusters(early.morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
#take out general crisis complaint - general
data <- filter(data, Event.Clearance.Description != 'CRISIS COMPLAINT - GENERAL')
morning <- filter(data, 6 <= at_scene_time_hr, at_scene_time_hr < 10 )
mid.day <-  filter(data, 10 <= at_scene_time_hr, at_scene_time_hr < 14 )
afternoon <-  filter(data, 14 <= at_scene_time_hr, at_scene_time_hr < 18 )
evening <-  filter(data, 18 <= at_scene_time_hr, at_scene_time_hr < 22 )
night <-  filter(data, 22 <= at_scene_time_hr | at_scene_time_hr < 2 )
early.morning <-  filter(data, 2 <= at_scene_time_hr, at_scene_time_hr < 6 )
ggmap(seattle) +
geom_point(data = morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Morning')
ggmap(seattle) +
geom_point(data = mid.day, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Mid Day')
ggmap(seattle) +
geom_point(data = afternoon, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Afternoon')
ggmap(seattle) +
geom_point(data = evening, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Evening')
ggmap(seattle) +
geom_point(data = night, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Night')
ggmap(seattle) +
geom_point(data = early.morning, aes(x = Longitude, y = Latitude), alpha = 0.5) +
labs(title = 'Early Morning')
lengths <- c(nrow(morning), nrow(mid.day), nrow(afternoon), nrow(evening), nrow(night), nrow(early.morning))
names <- c('Morning\n6:00 - 9:59', 'Mid-day\n10:00 - 1:59', 'Afternoon\n2:00 - 5:59', 'Evening\n6:00 - 9:59', 'Night\n10:00 - 1:59', 'Early Morning\n2:00 - 5:59')
by.tod <- data.frame('TOD' = names, 'Count.Crimes' = lengths)
by.tod$TOD = factor(by.tod$TOD, levels = by.tod$TOD)
ggplot(by.tod, aes(x = TOD, y = Count.Crimes)) +
geom_histogram(stat = 'identity')
# find the mode of numeric/character data
Mode <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux)); ux[tab == max(tab)]
}
tod.mean <- mean(data$at_scene_time_hr)
tod.med <- median(data$at_scene_time_hr)
tod.mean
tod.med
Mode(data$at_scene_time_hr)
#What is the most common crime committed at each period?
Mode(morning$Event.Clearance.Description)
Mode(mid.day$Event.Clearance.Description)
Mode(afternoon$Event.Clearance.Description)
Mode(evening$Event.Clearance.Description)
Mode(night$Event.Clearance.Description)
Mode(early.morning$Event.Clearance.Description)
=======
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
>>>>>>> 3a548828ac00234c328b8de6ecf3bc7e9b45da77
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
<<<<<<< HEAD
fit <- fit.clusters(early.morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
shiny::runApp('Documents/Informatics/Info370/project-teamname-v2/ShinyApp')
runApp('Documents/Informatics/Info370/project-teamname-v2/ShinyApp')
=======
?fit.clusters
??fit.clusters
runApp('project-teamname-v2/ShinyApp')
fit <- fit.clusters(morning, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(mid.day, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(afternoon, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(evening, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
fit <- fit.clusters(night, 10)
ggmap(seattle) +
geom_point(data = as.data.frame(fit$centers), aes(x = Longitude, y = Latitude), alpha = 0.5)
plot.cluster.sizes(fit)
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
?set.seed(44)
set.seed(44)
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
shiny::runApp('project-teamname-v2/ShinyApp')
runApp('project-teamname-v2/ShinyApp')
shiny::runApp('project-teamname-v2/ShinyApp')
>>>>>>> 3a548828ac00234c328b8de6ecf3bc7e9b45da77
